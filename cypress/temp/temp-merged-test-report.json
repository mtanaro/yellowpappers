{
  "stats": {
    "suites": 2,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2022-01-18T00:08:25.563Z",
    "end": "2022-01-18T00:08:28.020Z",
    "duration": 1165,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b827db46-9d17-45cf-add5-20e61b98e68d",
      "title": "",
      "fullFile": "cypress\\integration\\services\\store.spec.js",
      "file": "cypress\\integration\\services\\store.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bf024b17-ae7e-4852-9bd8-3a5d6249fbd3",
          "title": "Store source test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Get inventory",
              "fullTitle": "Store source test GET - Get inventory",
              "timedOut": null,
              "duration": 204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var endpoint = 'inventory';\ncy.fixture('data').then(function (uri) {\n  cy.getStoreInventory(uri, endpoint).then(function (res) {\n    expect(res).property('status').to.equal(200);\n    expect(res.body).not.be.null;\n    cy.log(\"inventory has: \" + JSON.stringify(res.body));\n  });\n});",
              "err": {},
              "uuid": "b8b498b1-8125-4177-89e6-83230e2bdb0d",
              "parentUUID": "bf024b17-ae7e-4852-9bd8-3a5d6249fbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Add an order for a pet",
              "fullTitle": "Store source test POST - Add an order for a pet",
              "timedOut": null,
              "duration": 110,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data;\nvar endpoint = 'order';\ncy.fixture('inventoryData').then(function (petData) {\n  data = petData;\n  cy.fixture('data').then(function (uri) {\n    cy.postStoreOrder(uri, endpoint, data).then(function (res) {\n      expect(res).property('status').to.equal(200);\n      expect(res.body).not.be.null;\n      cy.log(\"inventory has: \" + JSON.stringify(res.body));\n      cy.deleteElementByID(uri, uri.storeSource, endpoint, res.body.id).then(function (delResponse) {\n        expect(delResponse).property('status').to.equal(200);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "49c39071-a69f-4cc5-9fb9-974952ac1895",
              "parentUUID": "bf024b17-ae7e-4852-9bd8-3a5d6249fbd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Get purchase order by id",
              "fullTitle": "Store source test GET - Get purchase order by id",
              "timedOut": null,
              "duration": 128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data;\nvar endpoint = 'order';\ncy.fixture('inventoryData').then(function (petData) {\n  data = petData;\n  cy.fixture('data').then(function (uri) {\n    cy.postStoreOrder(uri, endpoint, data).then(function (res) {\n      expect(res).property('status').to.equal(200);\n      expect(res.body).not.be.null;\n      cy.log(\"inventory has: \" + JSON.stringify(res.body));\n      cy.getStoredOrderyById(uri, endpoint, res.body.id).then(function (result) {\n        expect(result).property('status').to.equal(200);\n        expect(result.body.id).equal(res.body.id);\n        cy.log(\"Result body for ID criteria: \" + JSON.stringify(result.body));\n      });\n      cy.deleteElementByID(uri, uri.storeSource, endpoint, res.body.id).then(function (delResponse) {\n        expect(delResponse).property('status').to.equal(200);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "2c82eb9a-c19f-47d2-a5e6-1ac9ba74eb89",
              "parentUUID": "bf024b17-ae7e-4852-9bd8-3a5d6249fbd3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8b498b1-8125-4177-89e6-83230e2bdb0d",
            "49c39071-a69f-4cc5-9fb9-974952ac1895",
            "2c82eb9a-c19f-47d2-a5e6-1ac9ba74eb89"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 442,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "22e870e2-b0fe-4bf5-ae47-ef2ff12e7f45",
      "title": "",
      "fullFile": "cypress\\integration\\services\\pet.spec.js",
      "file": "cypress\\integration\\services\\pet.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7c795139-2b18-4053-8e84-478e09b95860",
          "title": "Pet source test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET - Sucessfull searching an existing pet by status == available",
              "fullTitle": "Pet source test GET - Sucessfull searching an existing pet by status == available",
              "timedOut": null,
              "duration": 175,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var status = \"available\";\nvar findBy = \"Status\";\ncy.findPetBy(findBy, status).as('res');\ncy.get('@res').then(function (response) {\n  cy.validateBody(response.body, findBy, status);\n  cy.get('@isCorrectID').then(function (isCorrectID) {\n    expect(isCorrectID).to.be.true;\n  });\n  expect(response).property('status').to.equal(200);\n  expect(response.body).not.be.null;\n  cy.log(\"Response body is: \" + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "638bb6da-2abe-4647-a4d2-9164ef31d803",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Sucessfull searching an existing pet by status == pending",
              "fullTitle": "Pet source test GET - Sucessfull searching an existing pet by status == pending",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var status = \"pending\";\nvar findBy = \"Status\";\ncy.findPetBy(findBy, status).as('res');\ncy.get('@res').then(function (response) {\n  cy.validateBody(response.body, findBy, status);\n  cy.get('@isCorrectID').then(function (isCorrectID) {\n    expect(isCorrectID).to.be.true;\n  });\n  expect(response).property('status').to.equal(200);\n  expect(response.body).not.be.null;\n  cy.log(\"Response body is: \" + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "b505c670-995a-421b-9a8f-c4d1e910ac0a",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Sucessfull searching an existing pet by status == sold",
              "fullTitle": "Pet source test GET - Sucessfull searching an existing pet by status == sold",
              "timedOut": null,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var status = \"sold\";\nvar findBy = \"Status\";\ncy.findPetBy(findBy, status).as('res');\ncy.get('@res').then(function (response) {\n  cy.validateBody(response.body, findBy, status);\n  cy.get('@isCorrectID').then(function (isCorrectID) {\n    expect(isCorrectID).to.be.true;\n  });\n  expect(response).property('status').to.equal(200);\n  expect(response.body).not.be.null;\n  cy.log(\"Response body is: \" + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "7f12c17b-fe4b-4b77-8d04-25046e66c252",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Sucessfull searching an existing pet by id == 2",
              "fullTitle": "Pet source test GET - Sucessfull searching an existing pet by id == 2",
              "timedOut": null,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var id = \"2\";\nvar findBy = \"id\";\ncy.findPetBy(findBy, id).as('res');\ncy.get('@res').then(function (response) {\n  cy.validateBody(response.body, findBy, id);\n  cy.get('@isCorrectID').then(function (isCorrectID) {\n    expect(isCorrectID).to.be.true;\n  });\n  expect(response).property('status').to.equal(200);\n  expect(response.body).not.be.null;\n  cy.log(\"Response body is: \" + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "fd4b07bd-2bf1-4cae-bc8a-6cb9a2db41bb",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Sucessfull searching an existing pet by random id ",
              "fullTitle": "Pet source test GET - Sucessfull searching an existing pet by random id ",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var id = Math.floor(Math.random() * 10) + 1;\nvar findBy = \"id\";\ncy.findPetBy(findBy, id).as('res');\ncy.get('@res').then(function (response) {\n  cy.validateBody(response.body, findBy, id);\n  cy.get('@isCorrectID').then(function (isCorrectID) {\n    expect(isCorrectID).to.be.true;\n  });\n  expect(response).property('status').to.equal(200);\n  expect(response.body).not.be.null;\n  cy.log(\"Response body is: \" + JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "c1008b5e-0edd-4bcc-aa1e-e3a1a66fa014",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - CRUD Operation - Add new pet ",
              "fullTitle": "Pet source test POST - CRUD Operation - Add new pet ",
              "timedOut": null,
              "duration": 142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data;\ncy.fixture(\"petData\").then(function (petData) {\n  data = petData;\n  cy.fixture('data').then(function (uri) {\n    cy.postRequest(uri, petData).then(function (response) {\n      expect(response).property('status').to.equal(200);\n      expect(response.body).not.be.null;\n      expect(response.body.name).equal(data.name);\n      cy.log(\"Body has: \" + JSON.stringify(response.body));\n      cy.deletRequestByID(uri, response.body.id).then(function (delResponse) {\n        expect(response).property('status').to.equal(200);\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "6261c854-d612-4641-8921-10d9fdaaebb4",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - CRUD Operation - update existing pet ",
              "fullTitle": "Pet source test PUT - CRUD Operation - update existing pet ",
              "timedOut": null,
              "duration": 73,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data;\nvar newPetData = {\n  name: 'Sultan',\n  status: 'sold'\n};\ncy.fixture(\"petData\").then(function (petData) {\n  data = petData;\n  cy.fixture('data').then(function (uri) {\n    cy.postRequest(uri, petData).then(function (resp) {\n      data = resp.body;\n      data.name = newPetData.name;\n      data.status = newPetData.status;\n      cy.putRqeuest(uri, data).then(function (response) {\n        expect(response).property('status').to.equal(200);\n        expect(response.body).not.be.null;\n        expect(response.body.name).equal(data.name);\n        cy.log(\"Body has: \" + JSON.stringify(response.body));\n        cy.deletRequestByID(uri, response.body.id).then(function (delResponse) {\n          expect(response).property('status').to.equal(200);\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "c8a3b0bf-a685-4c9f-8d45-4a7bd6bde3be",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - CRUD Operation - update a pet by ID ",
              "fullTitle": "Pet source test POST - CRUD Operation - update a pet by ID ",
              "timedOut": null,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var data; //We will use id for an existing pet in roder to be sure we are editing the same data\ncy.fixture(\"petData\").then(function (petData) {\n  data = petData;\n  var newPetData = {\n    name: 'Rita',\n    status: 'sold'\n  };\n  cy.fixture('data').then(function (uri) {\n    cy.postRequest(uri, petData).then(function (response) {\n      expect(response).property('status').to.equal(200);\n      expect(response.body).not.be.null;\n      expect(response.body.name).equal(data.name);\n      cy.log(\"Body has: \" + JSON.stringify(response.body));\n      cy.postRequestByID(uri, response.body.id, newPetData.name, newPetData.status).then(function (res) {\n        expect(res).property('status').to.equal(200);\n        expect(res.body).not.be.null;\n        expect(res.body.id).equal(response.body.id);\n        expect(res.body.name).equal(newPetData.name);\n        expect(res.body.status).equal(newPetData.status);\n        cy.deletRequestByID(uri, response.body.id).then(function (delResponse) {\n          expect(delResponse).property('status').to.equal(200);\n        });\n      });\n    });\n  });\n});",
              "err": {},
              "uuid": "9d2e2a95-b08c-466a-b2c3-4927b75890c7",
              "parentUUID": "7c795139-2b18-4053-8e84-478e09b95860",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "638bb6da-2abe-4647-a4d2-9164ef31d803",
            "b505c670-995a-421b-9a8f-c4d1e910ac0a",
            "7f12c17b-fe4b-4b77-8d04-25046e66c252",
            "fd4b07bd-2bf1-4cae-bc8a-6cb9a2db41bb",
            "c1008b5e-0edd-4bcc-aa1e-e3a1a66fa014",
            "6261c854-d612-4641-8921-10d9fdaaebb4",
            "c8a3b0bf-a685-4c9f-8d45-4a7bd6bde3be",
            "9d2e2a95-b08c-466a-b2c3-4927b75890c7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 723,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.4"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "charts": true,
        "reportPageTitle": "Test report",
        "overwrite": false,
        "html": false,
        "json": true,
        "includeScreenshots": false,
        "timestamp": false,
        "code": true,
        "screenshotOnRunFailure": true,
        "embeddedScreenshots": true
      },
      "version": "6.0.1"
    }
  }
}